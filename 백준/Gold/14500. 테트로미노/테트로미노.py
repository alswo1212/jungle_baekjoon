N, M = map(int, input().split())

board = [list(map(int, input().split())) for _ in range(N)]
direcs = [(-1,0),(1,0),(0,-1),(0,1)]

cases = [
    [(0,-1),(0,1),(0,2),],
    [(-1,0),(1,0),(2,0),],
    [(0,1),(0,-1),(0,-2),],
    [(1,0),(-1,0),(-2,0),],

    [(1,0),(1,1),(0,1),],

    [(-1,0),(1,0),(1,1),],
    [(0,-1),(0,1),(-1,1),],
    [(1,0),(-1,0),(-1,-1),],
    [(0,1),(0,-1),(1,-1),],

    [(-1,0),(1,0),(1,-1),],
    [(0,-1),(0,1),(1,1),],
    [(1,0),(-1,0),(-1,1),],
    [(0,1),(0,-1),(-1,-1),],

    [(-1,0),(0,1),(1,1),],
    [(0,-1),(-1,0),(-1,1),],
    [(1,0),(0,-1),(-1,-1),],
    [(0,1),(1,0),(1,-1),],

    [(-1,0),(0,-1),(1,-1),],
    [(0,-1),(1,0),(1,1),],
    [(1,0),(0,1),(-1,1),],
    [(0,1),(-1,0),(-1,-1),],

    [(0,-1),(1,0),(0,1),],
    [(-1,0),(1,0),(0,1),],
    [(0,-1),(-1,0),(0,1),],
    [(0,-1),(1,0),(-1,0),],
]

def calc(row:int, col:int, case:list) -> int:
    global N, M, cases, board
    result = board[row][col]
    for dy, dx in case:
        if not (0 <= row+dy < N and 0 <= col+dx < M):
            return -1
        result += board[row+dy][col+dx]
    return result

result = 0

for i in range(N):
    for j in range(M):
        for case in cases:
            result = max(calc(i, j, case), result)
            
print(result)